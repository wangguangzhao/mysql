1、负载均衡（F5、linux LVS负载均衡）：采用轮询的方式将访问（负载）分担到多台服务器（服务器都是激活状态）；一般跟冗余技术一起使用搭建成集群。
2、冗余技术：解决单点服务器故障；原理在单台服务器后加一台备份服务器当服务器宕机是备份服务器会启动。
大数据存储
1、主从服务器：服务器级别的负载均衡技术
2、分区技术：解决表数据量太大时性能下降。（检索等操作）
当检索大数据中的词组时性能受影响，分成小表会提高性能。
优化：1、大表拆成小表（分库分表）
			垂直分表：（将列分出来）
			水平分表：（将表数据分出来-根据业务字段分）
			弊端：对程序端维护成本增加
	  2、分区技术（手册中检索patition）：1：解决分表弊端，兼容以前逻辑即表明不变，
	  			   2：解决大数据存储问题。
	  		RANGE分区技术：基于给定的一个连续区间的列值，把多行进行分区
	  		LIST分区技术：跟RANGE分区类似，基于某个列值以枚举的方式进行分区
	  		HASH分区技术：

	  3、sql语句的优化（增加索引-数据量大时索引维护代价太大）
	  		索引：优点加快查询速度，重建索引时在空闲时间进行。
	  			缺点：浪费空间

mysql主从服务器
1、bin log日志：记录数据库的增、删、改。
mysql的主从服务器实现了负载均衡。

页面加速：
1、squipt 反向缓存服务器 动静分离
2、页面静态化
3、memcache缓存（存储在内存中访问比较快）；
4、sphinx 全文索引，php先访问sphix 拿到查询结果的id后直接去mysql数据库中获取 速度比较快
中文分词，高亮技术。

网站服务、流量监控
1、服务监控：snmp(simple network xx)
 网络监控软件：

	1）apache web服务监控
	2）mysql数据库监控
	3）磁盘空间监控
	4）流量监控

mysql 授权 ？grant //授权某个用户可以在哪台服务器登录并可控制权限。

binlog 日志：存储增删改语句
reset master; //清空binlog日志
flush log :重新刷新日志
log_bin: /var/log/mysql/mysql-bin.log  //开启binlog日志
show master status:查看binlog最后状态信息
show variables like "%log_bin%"； //查看是否开启binlog日志

mysqldump -uroot -proot test -l -F '/tem/backup.sql'; //备份数据库
-l:读锁：期间不允许写入操作
执行备份后自动清空binlog日志
根据binlog日志恢复
mysqlbinlog --no-defaults  /var/log/mysql/mysql-bin.000007 --start-position="195" --stop-position="265" |mysql -uroot -proot mytest;

mysql主从复制的作用：
1、如果主服务器出现问题可快速切换到从服务器继续提供服务
2、可以在从服务器上执行查询操作降低主服务器的压力
3、可以在从服务器上执行备份操作以免备份期间影响主服务器的服务
注意：一般只用更新不频繁的数据或者对实时性要求不高的数据可以通过从服务器查询，实时性要求高的数据仍然要从主数据库获得。

配置主服务器： 1、登录mysql数据库 mysql -uroot -proot test 2、给服务器设置授权用户 grant all on *.* to
user@192.168.148.151 identified by "pass" 或 grant   replication slave on *.*
user @192.168.148.151 identified by "pass" 3、修改主数据库服务器的配置文件my.conf开启binlog
，并设置server-id的值 log-bin = /var/log/mysql/mysql-bin server-id=1 
4、在主服务器上设置读锁定有效，确保没有数据库操作，以便获得一致性的快照
flush tables with read lock;
 
show slaver status;
show master logs;



mysql批量插入数据
insert into t2 select * from t2;
索引原则：一般是where语句中频繁操作的列
innodb表数据结构：
	.frm :表结构文件
	.ibd：数据及索引 初始值10M
	要对innodb表进行分区必须要用独立表空间
配置文件中修改
	innodb_file_per_table = 1; //独立表空间


mysql优化：
一、mysql基础操作
	1、mysql表复制
		//复制表结构
		create table t1 like t2;
		//复制数据
		insert into t1 select * from t2;

	2、mysql索引
		//创建普通索引
		alter table table_name add index index_name(column_list);
		//创建唯一索引
		alter table table_name add index
		unique (column_list);
		//创建主键索引
		alter table table_name add primary key (column_list);

		//删除索引
		alter table table_name drop index index_name;
		//删除主键索引
		alter table table_name drop primary key;
		注：主键字段有自增设置时需将自增去掉后才能删除主键索引
		//改变主键字段为非自增
		alter table t1 change id id int unsigned not null;

	3、mysql视图：根据条件实时追踪*(临时表)
		//创建视图
		create view view_name as select column from table_name where xx;
		//删除视图
		drop view view_name;
		注：当视图依赖的表损坏（删除）时查询报错；当依赖表回复后恢复正常。
	4、mysql内置函数
		concat(str1,...):链接字符串 select concat("hello","word");
		lcase(str):字符串转小写
		ucase(str):字符串转大写
		length(str):计算字符串长度
		ltrim(str):去除前端空格
		rtrim(str):去除后边空格
		repeat(str,count): 重复count次
		replace(str,search_str,replace_str):在str中用replace_str替换search_str
		substring(str,position,[,length])://从str的position开始，取length个字符
		space(count):生成count个空格
		//数字函数
		bin(decimal_number) //十进制转二进制
		ceiling(number1) :向上取整
		floor(number1) :向下取整
		Max(column):取最大值(分组聚合时使用)
		min(column):取最小值(分组聚合时使用)
		sqrt(num1):开平方
		rand() :返回0-1内的随机值

		//日期函数
		curdate(): 当前日期 2018-02-22
		curtime():当前时间 04:34:11
		now():返回当前日期的时间 2018-02-22 04:34:26
		unix_timestamp(date):返回unix时间戳的日期值 1519286400   10位数字
		from_unixtime(timestamp):返回timestamp unix时间戳的日期值
		week(date):返回date为一年中的第几周
		year(date)：返回日期date的年份
		datediff(expr,expr2):返回起始时间expr和结束时间expr2间隔天数
 
	5、mysql预处理语句
		设置stmt1预处理，传递一个数据作为一个where判断条件
		prepare stmt1 from 'select * from t1 where id > ?';
		set @i=1; //设置变量
		//执行
		execute stmt1 using @i;
		删除预处理stmt1
		drop parpare stmt1；
		//应用场景：将sql语句预处理存下来只改变可变内容
 
	6、mysql事务处理（对myisam表引擎的表不起效 ）
		1、关闭自动提交功能
			set autocommit =0;
		2、从t1表中删除一条记录
			delete from t1 where id='1';
		3、保存还原点
			savepoint p1;
		4、再次从t1表中删除一条记录
			delete from t1 where id='2'
		5、再次保存一次还原点
			savepoint p2;
		//此时恢复到p1还原点，当后面的p2还原点会失效
		//回滚到p1还原点
		rollback to p1；
		rollback；//还原到最原始还原点
		commit：最后的提交。

		修改表引擎
		alter table t1 engine=innodb;

	7、mysql存储过程:procedure
		使用场景：类似php函数。
		\d //
		create procedure p2()
		begin
		set @i =3;
		while @i<=100 do
		insert into t1(name) values(concat("user",@i));
		set @i = @i+1;
		end while;
		end;
		\d ;
		call p2();
		drop procedure p2; //删除p2存储过程
	8、mysql触发器 trigger
		应用场景：当一个表增删改操作时另一张表跟随改变。
		//例如：向t1表增加一条语句时t2表也插入一条
		\d //
		create trigger t1 before insert 
		on t1 for each row
		begin
		insert into t2(name) values (new.name);
		end
		//

		//查看触发器
		show triggers
		//删除表t1后t2 也跟着删除的触发器

		\d //
		create trigger t_delete after delete on t1 for each row
		begin
		delete from t2 where t2.name=old.name;
		end
		//
		更新操作也是一样
		\d //
		create trigger t_update after update on t1 for each row
		begin
		update t2 set t2.name=new.name where t2.name = old.name;
		end
		//



	9、重排auto_increment值
		//清空表且auto_increment为1
		1、truncate table table_name; 
		//清空内容后用alter 命令修改表
		alter table table_name auto_increment =1;
		


二、常见sql技巧
2.1、正则表达式的使用（regexp）
	优点：查询匹配替换时使用。
	select email from t where email regexp "@163[,.]com";
	使用like实现
	select email from t where email like "%163.com"or	email like "%163,com";
2.2、巧用rand()提取随机行
	select * from t1 order by rand() limit 10; //效率可能不高不建议使用

2.3、利用grop by 的with rollup子句统计
	使用 with rollup 关键字后可统计出更多的信息，
	注：with rollup 不可以和order by同时使用
	select cname,pname,count(pname) from demo group by cname,pbane with rollup;

2.4、用 bit group functions 做统计
	在使用group by语句是可以同时使用bit_and、bit_or函数来完成统计工作。这两个函数的作用主要是数值之间的逻辑位运算。
	对列中int 十进制数值转换成二进制进行与或运算

2.5、使用外键需要注意的问题
	innodb类型的表支持外键，myisam类型的表虽然创建外键可以成功但不支持外键
	注：mysql中不建议使用外键
2.6、mysql中help的使用
	?% 可以获取更多帮助信息
	?contents:所有帮助信息

三、sql语句的优化
3.1优化sql语句的一般步骤
	1、通过慢查询日志查看sql语句看看影响行数，是否需要加索引，以及索引是否可以用得上
	
	2、通过show status命令查看各种sql的执行频率。用来判断当前数据库以哪种操作为主。
	show [session|global] status;
	session(默认)当前连接
	global表示自数据库启动至今

	show status like "com_insert%";
	show status like "com_delete%";
	show status like "com_update%";
	show status like "com_select%";
只真对innodb存储引擎的 影响行数
	Innodb_rows_deleted         
    Innodb_rows_inserted        Innodb_rows_read            Innodb_rows_updated

    connections：连接数
    show status like "slow_queries";
    //定位执行效率较低的sql
    explain|desc sql


3.2索引问题
	最常见的优化就是索引优化，通过索引优化可以解决大多数的sql性能问题。
	索引的存储分类：
		myisam引擎的表：索引和数据是分开的，分别存储为三个文件，分别是表结构、数据、索引
		innodb引擎的表：默认表空间是共享的
		每个表的表结构是分别存储为单一文件，但是数据跟索引存储到一个文件中
		独立表空间分别存储为三个文件。

		主键索引：
		唯一索引：
		普通索引：
		组合索引：只有最左侧字段在查询条件中（不管查询中的任何位置）都会使用索引，否则不会使用

		使用like的查询，后面如果是常量且只有%不在第一个字符，索引才可能被使用
		注：当进行全表扫描时就算有索引也不会用

		当使用or时所有字段必须都有索引时才会使用。

		查看索引使用情况
		show status like 'handler_read%';
		handler_read_rnd_next的值高意味着查询运行低效，应该建立索引补救。

3.3两个简单使用的优化方法
	1、检查一个或多个表是否有错误，包括表存在与否
	check table table_name;
	2、optimize：如果已经删除了表的一大部分，或者如果已经对含有可变长度行的表进行了很多的改动，则需要做定期优化。这个命令可以将表中的空间碎片进行合并，但此命令只对myisam，innodb无效。
	optimize table sales;
3.4常用sql的优化
	1、大批量插入数据
	当用load命令导入数据时，适当设置可以提高导入的速度。
	对于 myisam引擎的表可通过以下方式快速导入大量数据先关闭非唯一索引 导出数据后再加入进去
	infile：
	outfile：
	关闭普通索引
	alter table tabl_name disable keys;
	打开普通索引
	alter table tabl_name enable keys;
	（保证导入数据唯一时可关闭唯一索引）
	关闭唯一索引 unique_checks=0
	开启唯一索引 unique_checks=1

	针对innodb类型的数据表导入的优化
		1、因为innodb表的按照主键顺序保存的索引将导入主键的顺序排列可有效的提高导入效率。
		2、关闭自动提交可提高导入效率
		set autocommit=0;
		导入结束后执行set autocommit=1

	3.4.2优化insert语句
	尽量使用多个值表的insert语句，这样可以大大缩短客户与数据库的连接、关闭等损耗
	即：用这种sql是最优的
	insert into t1(name) values ("zhangsan"),("lisi");
	3.4.3优化group by 语句

